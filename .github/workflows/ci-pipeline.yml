name: fast-n-foodious-ci
run-name: Fast N Foodious CI

on: [push]
jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
            
      - name: Installing dependencies
        run: npm install
        
      - name: Running unit tests
        run: npm run test
      - name: Running coverage tests
        run: npm run test:cov
      - name: Running check components without unit/e2e tests
        run: npm run test:check

  e2e-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    env:
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_HOST: '%'
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Installing dependencies
        run: npm install
      - name: Running e2e tests in memory repositories
        run: NODE_ENV=local-mock-repository npm run test:e2e
      - name: Running e2e in mysql server - Build Docker Images for Tests
        run: docker-compose --env-file ./envs/prod.env build
      - name: Running e2e in mysql server - Start Docker Containers
        run: docker-compose --env-file ./envs/prod.env up -d
      - name: Running e2e in mysql server - Wait for MySQL to Accept Connections
        run: docker-compose exec -T mysql sh -c 'while ! mysqladmin ping -hlocalhost --silent; do sleep 1; done'
      - name: Checking Containers
        run: docker ps
      - name: Docker Compose Envs
        run: docker-compose --env-file ./envs/prod.env exec -T fast-n-foodious sh -c "env"
      - name: IP Mysql
        run: docker inspect  -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' mysql
      - name: Hosts in the Container
        run: docker-compose --env-file ./envs/prod.env exec -T fast-n-foodious sh -c "cat /etc/hosts"

  build-dockerhub:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
      - name: Login Dockerhub
        env:
          DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - name: Build Docker Image
        run: docker build -t felipemaxrosa/fast-n-foodious .
      - name: Push to Dockerhub
        run: docker push felipemaxrosa/fast-n-foodious:latest

  build:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: e2e-tests
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3

      - name: Login to AWS ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 571341489776.dkr.ecr.us-east-1.amazonaws.com/fast-n-foodious

      - name: Build Docker Image
        run: docker build -t felipemaxrosa/fast-n-foodious:latest .
      - name: Tag Docker Image
        run: |
          docker tag felipemaxrosa/fast-n-foodious:latest 571341489776.dkr.ecr.us-east-1.amazonaws.com/fast-n-foodious:latest
      - name: Push Docker Image to ECR
        run: |
          docker push 571341489776.dkr.ecr.us-east-1.amazonaws.com/fast-n-foodious:latest


  deploy-STAGING:
    if: ${{ github.ref == 'refs/heads/develop' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Deploying application to STAGING
        run: echo "The application has been deployed to STAGING successfully."

  smoke-tests-STAGING:
    runs-on: ubuntu-latest
    needs: deploy-STAGING
    steps:
      - uses: actions/checkout@v3
        
      - name: Running Smoke Tests on STAGING 
        run: echo "Running Smoke Tests on STAGING"

  integration-tests-STAGING:
    runs-on: ubuntu-latest
    needs: smoke-tests-STAGING
    steps:
      - uses: actions/checkout@v3
        
      - name: Running Integration Tests on STAGING 
        run: echo "Integration Tests on STAGING has been executed successfully."
        
  deploy-PRE-RELEASE:
    if: ${{ github.ref == 'refs/heads/release' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Deploying application to PRE-RELEASE 
        run: echo "The application has been deployed to PRE-RELEASE successfully."

  smoke-tests-PRE-RELEASE:
    runs-on: ubuntu-latest
    needs: deploy-PRE-RELEASE
    steps:
      - uses: actions/checkout@v3
        
      - name: Running Smoke Tests on STAGING 
        run: echo "Running Smoke Tests on PRE-RELEASE"

  functional-tests-PRE-RELEASE:
    runs-on: ubuntu-latest
    needs: smoke-tests-PRE-RELEASE
    steps:
      - uses: actions/checkout@v3
        
      - name: Running Integration Tests on PRE-RELEASE 
        run: echo "Functional Tests on PRE-RELEASE has been executed successfully."

  deploy-PRODUCTION:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Deploying application to PRODUCTION
        run: echo "The application has been deployed to PRODUCTION successfully."
        